from utils import *
import sys

base_imports_async = "\"\"\"\n@theotzenRequestClientGenerator\n" \
                     "This file is autogenerated from OpenAPI routes\n\"\"\"\n\n" \
                     "import httpx\nimport os\nfrom dotenv import load_dotenv\nfrom fastapi import HTTPException\n" \
                     "from fastapi.encoders import jsonable_encoder\nfrom app.core.log_config import init_loggers\n\n" \
                     "loggerIH = init_loggers(__name__)\n\nload_dotenv()\n\n" \
                     "base_url = os.getenv(__name__)\n\nclient = httpx.AsyncClient()"

base_imports_sync = "\"\"\"\n@theotzenRequestClientGenerator\n" \
                    "This file is autogenerated from OpenAPI routes\n\"\"\"\n\n" \
                    "import httpx\nimport os\nfrom dotenv import load_dotenv\nfrom fastapi import " \
                    "HTTPException\n" \
                    "from fastapi.encoders import jsonable_encoder\nfrom app.core.log_config import " \
                    "init_loggers\n\n" \
                    "loggerIH = init_loggers(__name__)\n\nload_dotenv()\n\nbase_url = os.getenv(__name__)"


def write_functions_to_python_file_with_path(path_to_write_in: str,
                                             func_dict: dict,
                                             base_imports: str):
    for key in func_dict.keys():
        final_path = path_to_write_in + "/" + key + "_req.py"
        to_write = "\n\n\n".join(func_dict[key])
        with open(final_path, 'w') as f:
            f.write(base_imports + "\n\n\n")
            f.write(to_write)
            f.close


def from_json_to_writing(base_url: str,
                         path_to_write_in: str,
                         client: str = 'async'):
    json_url = base_url + '/openapi.json'
    if client != 'sync':
        async_client = True
        base_imports = base_imports_async
    else:
        async_client = False
        base_imports = base_imports_sync
    all_json = from_json_to_functions(json_url=json_url, async_client=async_client)
    write_functions_to_python_file_with_path(path_to_write_in=path_to_write_in, func_dict=all_json,
                                             base_imports=base_imports)


if __name__ == '__main__':
    # Map command line arguments to function arguments.
    from_json_to_writing(*sys.argv[1:])
